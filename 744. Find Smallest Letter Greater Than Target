Given a list of sorted characters letters containing only lowercase letters, and given a target letter target, find the smallest element in the list that is larger than the given target.

Letters also wrap around. For example, if the target is target = 'z' and letters = ['a', 'b'], the answer is 'a'.

Examples:
Input:
letters = ["c", "f", "j"]
target = "a"
Output: "c"

Input:
letters = ["c", "f", "j"]
target = "c"
Output: "f"

Input:
letters = ["c", "f", "j"]
target = "d"
Output: "f"

Input:
letters = ["c", "f", "j"]
target = "g"
Output: "j"

Input:
letters = ["c", "f", "j"]
target = "j"
Output: "c"

Input:
letters = ["c", "f", "j"]
target = "k"
Output: "c"
Note:
letters has a length in range [2, 10000].
letters consists of lowercase letters, and contains at least 2 unique letters.
target is a lowercase letter.
//在看到这种给出了已经排好序的数组，同时需要寻找一些什么数据的时候，都可以使用二分查找
//其实对于查找来说，最基本的，也是最常用的也就是二分查找了
//方法一：使用二分查找
class Solution {
public:
    typedef vector<char>::size_type vSize;
    char nextGreatestLetter(vector<char>& letters, char target) {
        if(target >= letters.back())
            return letters[0];
        vSize p(0),q(letters.size() - 1);
        while(p < q){//这里判断条件是很重要的，因为不是找某数，而是找刚好更大的某数，这里出了很多错
            vSize mid = (p + q) / 2;
            if(letters[mid] > target)
                q = mid;
            else
                p = mid + 1;
        }
        return letters[p];
    }
};
